# **Discussion Board Project Plan**

---

## **Group Members and Roles**
- **Naveen Kuhar** - Backend
- **Rukasna** - Frontend
- **Mandeep** - Security

---

## **Classcode**
- **CP-S4**

---

## **Technologies Used**

- **TypeScript**: Frontend development.
- **React**: Backend development.
- **Bootstrap**: Styling.
- **PostgreSQL**: Database management.
- **Spring Security**: Authentication and security.

---

## **Timeline**

### **Gantt Chart**

| Phase                     | Task Description                              | Duration   | Start Date | End Date   |
|---------------------------|-----------------------------------------------|------------|------------|------------|
| **Phase 1: Planning**     | Define project requirements                  | 1 day      | 2025-05-22 | 2025-05-22 |
|                           | Set up the development environment           | 1 day      | 2025-05-22 | 2025-05-22 |
|                           | Create database schema and models            | 1 day      | 2025-05-22 | 2025-05-22 |
| **Phase 2: Backend**      | Create discussion board functionality        | 2 days     | 2025-05-23 | 2025-05-24 |
|                           | Add database integration and relationships   | 2 days     | 2025-05-23 | 2025-05-24 |
|                           | Write unit tests for backend functionality   | 2 days     | 2025-05-23 | 2025-05-24 |
| **Phase 3: Frontend**     | Develop UI components using Bootstrap        | 2 days     | 2025-05-25 | 2025-05-26 |
|                           | Integrate frontend with backend API          | 2 days     | 2025-05-25 | 2025-05-26 |
|                           | Implement responsive design                  | 2 days     | 2025-05-25 | 2025-05-26 |
| **Phase 4: Deployment**   | Add Spring Security for authentication       | 1 day      | 2025-05-27 | 2025-05-27 |
|                           | Conduct end-to-end testing                   | 1 day      | 2025-05-27 | 2025-05-27 |
|                           | Deploy the application to production         | 1 day      | 2025-05-27 | 2025-05-27 |

---

## **Screenshots**

![Application Screenshot](public/Screenshots/image.png)

---

## **Project Goal**
The project aims to develop a comprehensive discussion board application where users can register, create threads, post messages, and interact with others. The application will feature user authentication, thread management, and a responsive user interface.

---

## **Key Elements**

### **Backend**
- **Database**: A relational database (e.g., MySQL, PostgreSQL) to store user data, threads, and posts. Sequelize ORM is used for database interaction.
- **API**: RESTful API endpoints for user authentication, thread management, and post management.
- **Models**:
  - **User**: Represents registered users with attributes like id, username, email, and password.
  - **Thread**: Represents discussion threads with attributes like id, title, and userId (foreign key).
  - **Post**: Represents posts within threads with attributes like id, content, threadId (foreign key), and userId (foreign key).
- **Middleware**: Authentication middleware to secure API endpoints and validate user sessions.
- **Relationships**:
  - **User** has many **Threads** and **Posts**.
  - **Thread** belongs to a **User** and has many **Posts**.
  - **Post** belongs to both **Thread** and **User**.

### **Frontend**
- **UI Components**:
  - Reusable components for forms, navigation, and displaying threads/posts.
  - Components include **LoginForm**, **RegisterForm**, **MainNavigation**, **NewPostInput**, and **PostItem**.
- **Pages**:
  - **Index**: Displays a list of threads.
  - **PostDetailPage**: Shows posts within a thread.
  - **ProfilePage**: Displays user profile information.
  - **ChatbotPage**: Integrates a chatbot for user assistance.
- **Services**:
  - **postService**: Handles API calls related to posts.
  - **chatbotService**: Manages chatbot interactions.
  - **sqlService**: Executes SQL queries for advanced users.

### **Communication**
- **Routes**:
  - `/api/users`: Handles user-related operations like registration and login.
  - `/api/threads`: Manages thread creation and retrieval.
  - `/api/posts`: Handles post creation and retrieval.
- **Error Handling**:
  - **Backend**: Centralized error handling middleware for API responses.
  - **Frontend**: User-friendly error messages displayed in the UI.

---

## **Risks**
- **Database Issues**: Connection problems or schema conflicts.
- **API Security**: Risks of unauthorized access or data breaches.
- **Integration Challenges**: Ensuring seamless communication between frontend and backend.
- **Timeline Delays**: Unforeseen delays in development or testing phases.

---

## **Communication Plan**
- **Team Meetings**: Weekly meetings to discuss progress and address blockers.
- **Task Management**: Use tools like Trello or Jira to track tasks and milestones.
- **Code Reviews**: Regular reviews to maintain code quality and consistency.
- **Documentation**: Maintain detailed documentation for API endpoints, database schema, and project setup.
- **Communication Tools**: Use Slack or Microsoft Teams for real-time communication.

---

## **How Everything Works and How We Achieve It**

### **Backend**

1. **Database**:
   - A relational database (e.g., MySQL, PostgreSQL) is used to store data for users, threads, and posts.
   - Sequelize ORM simplifies database interactions by allowing us to define models (**User**, **Thread**, **Post**) and their relationships.
   - **Relationships**:
     - **User** has many **Threads** and **Posts**.
     - **Thread** belongs to a **User** and has many **Posts**.
     - **Post** belongs to both **Thread** and **User**.

2. **API**:
   - RESTful API endpoints handle user authentication, thread management, and post management.
   - Routes are organized in **userRoutes.js** and **threadRoutes.js**.

3. **Authentication**:
   - Users register and log in via API endpoints (`/api/users/register` and `/api/users/login`).
   - Passwords are hashed before storing them in the database.
   - JWT tokens are issued upon successful login to maintain authenticated sessions.

4. **Middleware**:
   - Authentication middleware ensures only authorized users can access protected routes.

5. **Database Synchronization**:
   - The database schema is synchronized using `sequelize.sync()` in **server.js**.

### **Frontend**

1. **UI Components**:
   - Reusable components like **LoginForm**, **RegisterForm**, **MainNavigation**, and **PostItem** are built using React.
   - These components are styled and designed to provide a responsive user interface.

2. **Pages**:
   - **Index**: Displays a list of threads.
   - **PostDetailPage**: Shows posts within a thread.
   - **ProfilePage**: Displays user profile information.
   - **ChatbotPage**: Integrates a chatbot for user assistance.

3. **State Management**:
   - React Context or Redux is used to manage global state, such as user authentication status and thread data.

4. **API Integration**:
   - Axios is used to make HTTP requests to the backend API.
   - Responses are processed and displayed using React components.

5. **Services**:
   - **postService**: Handles API calls related to posts.
   - **chatbotService**: Manages chatbot interactions.
   - **sqlService**: Executes SQL queries for advanced users.

### **How Backend and Frontend Work Together**

1. **User Registration and Login**:
   - The frontend sends a POST request to `/api/users/register` or `/api/users/login`.
   - The backend validates the input, processes the request, and returns a response (e.g., a JWT token for login).

2. **Thread and Post Management**:
   - Threads and posts are created via POST requests to `/api/threads` and `/api/posts`.
   - The backend validates the input, stores the data in the database, and returns the created resource.
   - Threads and posts are retrieved via GET requests to `/api/threads` and `/api/posts`.

3. **Error Handling**:
   - The backend uses centralized error-handling middleware to return consistent error responses.
   - The frontend displays user-friendly error messages based on the backend's responses.

### **Deployment**

1. **Backend**:
   - Deployed to a cloud platform like AWS or Heroku.
   - The database is hosted on a managed service like AWS RDS or Azure SQL.

2. **Frontend**:
   - Hosted on a static site hosting service like Netlify or Vercel.

### **Testing**

1. **Unit Tests**:
   - Written for backend models and API endpoints to ensure individual components work as expected.

2. **Integration Tests**:
   - Validate that the frontend and backend work together seamlessly.

3. **End-to-End Tests**:
   - Simulate user interactions to test the entire application flow.

### **How We Achieve This**

1. **Planning**:
   - A detailed project plan was created, outlining goals, elements, timeline, and risks.

2. **Development**:
   - Backend and frontend were developed in parallel, with clear API contracts to ensure compatibility.

3. **Collaboration**:
   - Regular team meetings, task tracking, and code reviews ensured smooth progress.

4. **Tools and Technologies**:
   - Sequelize for database interaction.
   - React for building the frontend.
   - Axios for API communication.
   - JWT for authentication.
   - Cloud platforms for deployment.
